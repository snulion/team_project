<script src="/assets/recorder.js" type="text/javascript"></script>


<button class="record-button" onclick="startRecording(this);">record</button>
<button class="record-button" onclick="stopRecording(this);" disabled>stop</button>
<button class="record-butoon" onclick="fileuploadready(this);">upload</button>

<ul id="recordingslist"></ul>

<pre id="log"></pre>

<script>

var audio_context;
var recorder;

function startUserMedia(stream) {
  var input = audio_context.createMediaStreamSource(stream);  // create MediaStreamAudioSourceNode object
  console.log('Media stream created.');

  // Uncomment if you want the audio to feedback directly
  //input.connect(audio_context.destination);
  //console.log('Input connected to audio context destination.');

  recorder = new Recorder(input);
  console.log('Recorder initialised.');
}

function startRecording(button) {
  recorder && recorder.record();
  button.disabled = true;
  button.nextElementSibling.disabled = false;
  console.log('Recording...');
}

function stopRecording(button) {
  recorder && recorder.stop();
  button.disabled = true;
  button.previousElementSibling.disabled = false;
  console.log('Stopped recording.');

  // create WAV download link using audio data blob
  createDownloadLink();

  recorder.clear();
}

function createDownloadLink() {
  recorder && recorder.exportWAV(function(blob) {
    var url = URL.createObjectURL(blob);
    var li = document.createElement('li');
    var au = document.createElement('audio');
    var hf = document.createElement('a');
    hf.setAttribute("id", "uploads");

    au.controls = true;
    au.src = url;
    hf.href = url;
    hf.download = new Date().toISOString() + '.wav';  // toISOString() : ISO format의 시간 반환
    hf.innerHTML = hf.download;
    li.appendChild(au);
    li.appendChild(hf);
    recordingslist.appendChild(li);
  });
}

function fileuploadready() {
  var up = document.getElementById("uploads");
  var up_file = FileAPI.readAsDataURL(up.href, function (evt/**Object*/){
    if( evt.type == 'load' ){
        // Success
        var dataURL = evt.result;
    } else if( evt.type =='progress' ){
        var pr = evt.loaded/evt.total * 100;
    } else {
        // Error
    }
  });
  $('#input_file').val(up_file);
}

$(document).ready(function() {
  try {
    // webkit shim
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
    window.URL = window.URL || window.webkitURL;

    audio_context = new AudioContext;
    console.log('Audio context set up.');
    console.log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
  } catch (e) {
    alert('No web audio support in this browser!');
  }
  
  // navigator.getUserMedia : 사용자의 video, audio 기능 허용 관련
  // navigator.getUserMedia(constraints, successCallback, errorCallback);
  // 성공일 경우, startUserMedia 함수 실행
  navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
    console.log('No live audio input: ' + e);
  });
});
</script>